commit 5ffd87871619a750ad19e247670a0887a6d38fbd
Author: Aman Gupta <aman@tmm1.net>
Date:   Sun Aug 1 18:50:38 2010 -0700

    perftools-objects

diff --git a/src/profile-handler.cc b/src/profile-handler.cc
index 619b980..2ecf2c0 100644
--- a/src/profile-handler.cc
+++ b/src/profile-handler.cc
@@ -402,6 +402,8 @@ void ProfileHandler::GetState(ProfileHandlerState* state) {
 }
 
 void ProfileHandler::StartTimer() {
+  if (getenv("CPUPROFILE_OBJECTS")) return;
+
   struct itimerval timer;
   timer.it_interval.tv_sec = 0;
   timer.it_interval.tv_usec = 1000000 / frequency_;
@@ -410,12 +412,16 @@ void ProfileHandler::StartTimer() {
 }
 
 void ProfileHandler::StopTimer() {
+  if (getenv("CPUPROFILE_OBJECTS")) return;
+
   struct itimerval timer;
   memset(&timer, 0, sizeof timer);
   setitimer(realtime_ ? ITIMER_REAL : ITIMER_PROF, &timer, 0);
 }
 
 bool ProfileHandler::IsTimerRunning() {
+  if (getenv("CPUPROFILE_OBJECTS")) return false;
+
   struct itimerval current_timer;
   RAW_CHECK(0 == getitimer(realtime_ ? ITIMER_REAL : ITIMER_PROF, &current_timer), "getitimer");
   return (current_timer.it_value.tv_sec != 0 ||
@@ -423,6 +429,8 @@ bool ProfileHandler::IsTimerRunning() {
 }
 
 void ProfileHandler::EnableHandler() {
+  if (getenv("CPUPROFILE_OBJECTS")) return;
+
   struct sigaction sa;
   sa.sa_sigaction = SignalHandler;
   sa.sa_flags = SA_RESTART | SA_SIGINFO;
@@ -431,6 +439,8 @@ void ProfileHandler::EnableHandler() {
 }
 
 void ProfileHandler::DisableHandler() {
+  if (getenv("CPUPROFILE_OBJECTS")) return;
+
   struct sigaction sa;
   sa.sa_handler = SIG_IGN;
   sa.sa_flags = SA_RESTART;
diff --git a/src/profiler.cc b/src/profiler.cc
index 37234b2..905288f 100644
--- a/src/profiler.cc
+++ b/src/profiler.cc
@@ -97,6 +97,10 @@ class CpuProfiler {
 
   static CpuProfiler instance_;
 
+  // Signal handler that records the interrupted pc in the profile data.
+  static void prof_handler(int sig, siginfo_t*, void* signal_ucontext,
+                           void* cpu_profiler);
+
  private:
   // This lock implements the locking requirements described in the ProfileData
   // documentation, specifically:
@@ -125,10 +129,6 @@ class CpuProfiler {
 
   // Disables receiving SIGPROF interrupt.
   void DisableHandler();
-
-  // Signal handler that records the interrupted pc in the profile data.
-  static void prof_handler(int sig, siginfo_t*, void* signal_ucontext,
-                           void* cpu_profiler);
 };
 
 // Profile data structure singleton: Constructor will check to see if
@@ -318,6 +318,10 @@ extern "C" PERFTOOLS_DLL_DECL void ProfilerFlush() {
 extern "C" PERFTOOLS_DLL_DECL void ProfilerGcMark(void (*cb)(VALUE)) {
   CpuProfiler::instance_.GcMark(cb);
 }
+
+extern "C" PERFTOOLS_DLL_DECL void ProfilerRecord(int sig, siginfo_t* info, void* signal_ucontext) {
+  CpuProfiler::prof_handler(sig, info, signal_ucontext, (void*)&CpuProfiler::instance_);
+}
 #endif
 
 extern "C" PERFTOOLS_DLL_DECL int ProfilingIsEnabledForAllThreads() {
